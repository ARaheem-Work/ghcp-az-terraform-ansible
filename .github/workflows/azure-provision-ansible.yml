# GitHub Actions workflow to provision Azure PaaS resources with Terraform and configure them with Ansible
#
# This workflow assumes the following:
# - Azure credentials are stored as GitHub secrets: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID, AZURE_CLIENT_SECRET
# - Ansible playbooks are in the ansible/ directory
# - Terraform code is in the terraform/ directory
# - env_vars.sh and tf_env_vars.sh set required environment variables

name: Provision Azure PaaS using Terraform and Configure with Ansible

on:
  workflow_dispatch:
    inputs:
      location:
        description: 'Azure region'
        required: true
        default: 'EastUS'
      tf_log_level:
        description: 'Terraform log level'
        required: true
        default: 'ERROR'
        type: choice
        options:
          - TRACE
          - DEBUG
          - INFO
          - WARN
          - ERROR
          - OFF
# Generated by GH Copilot

jobs:
  azure_Provisioning:
    runs-on: ubuntu-latest
    outputs:
      TF_OUTPUTS1: ${{ steps.tf_outputs.outputs.TF_OUTPUTS }}
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_LOG: ${{ github.event.inputs.tf_log_level }} # Generated by GH Copilot
      TF_VAR_location: ${{ github.event.inputs.location }} # Generated by GH Copilot
    steps:
      - name: Output Azure Credentials
        run: |
          echo "ARM_CLIENT_ID=$ARM_CLIENT_ID"
          echo "ARM_SUBSCRIPTION_ID=$ARM_SUBSCRIPTION_ID"
          echo "ARM_TENANT_ID=$ARM_TENANT_ID"
          echo "ARM_CLIENT_SECRET=$ARM_CLIENT_SECRET"
          echo "Azure credentials are set."
          echo "TF_LOG=$TF_LOG"
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Upload Terraform Outputs
        id: tf_outputs
        working-directory: ./terraform
        run: |
          terraform output -json > tf_outputs.json
          echo "TF_OUTPUTS=$(cat tf_outputs.json | base64 -w0)" >> $GITHUB_OUTPUT
      - name: Display Tools versions
        run: |
          echo "Terraform version: $(terraform version)"
          echo "Azure CLI version: $(az --version)"
          echo "GitHub Actions runner OS: $(uname -a)"
          echo "GitHub Actions runner architecture: $(uname -m)"

  ansible_configuration:
    runs-on: ubuntu-latest
    needs: azure_Provisioning
    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          
      - name: Verify Ansible Installation
        run: |
          ansible --version
          

      - name: Install Ansible Azure Collections
        run: |
          ansible-galaxy collection install azure.azcollection:3.3.1

      - name: Verify Ansible Azure Modules
        run: |
          ansible-galaxy collection list azure.azcollection

      - name: Install Ansible Azure Deppendencies
        run: |
          pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt

      - name: Verify Ansible Azure Dependencies
        run: |
          pip3 list | grep azure


      - name: Display Tools versions
        run: |
          echo "Python version: $(python --version)"
          echo "Python3 version: $(python3 --version)"
          echo "pip version: $(pip --version)"
          echo "pip3 version: $(pip3 --version)"
          echo "Ansible version: $(ansible --version)"
          echo "Azure CLI version: $(az --version)"
          echo "GitHub Actions runner OS: $(uname -a)"
          echo "GitHub Actions runner architecture: $(uname -m)"
          

      - name: Decode Terraform Outputs
        run: |
          echo "${{ needs.azure_Provisioning.outputs.TF_OUTPUTS1 }}" | base64 -d > tf_outputs.json
          cat tf_outputs.json
          export RESOURCE_GROUP_NAME=$(jq -r .resource_group_name.value tf_outputs.json)
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME"
          export APP_SERVICE_NAME=$(jq -r .app_service_name.value tf_outputs.json)
          echo "APP_SERVICE_NAME=$APP_SERVICE_NAME" >> $GITHUB_ENV
          echo "APP_SERVICE_NAME=$APP_SERVICE_NAME"

      - name: Run Ansible Playbook
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          ansible-playbook -i localhost, ./ansible/configure_app_service.yml --extra-vars "resource_group_name=$RESOURCE_GROUP_NAME app_service_name=$APP_SERVICE_NAME"
